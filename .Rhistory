xyplot(Anxiety~SesNum | ClientID, data=LfvrLong,subset = rando100,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(-2, 6), as.table=T)
rando100 <- round(runif(100,1,12825),0) #creates object of 100 random numbers from 1 to 12825
xyplot(Anxiety~SesNum | ClientID, data=LfvrLong, subset = rando100,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(0, 6), as.table=T)
rando100 <- round(runif(250,1,12825),0) #creates object of 100 random numbers from 1 to 12825
rando100 <- round(runif(250,1,12825),0) #creates object of 100 random numbers from 1 to 12825
xyplot(Anxiety~SesNum | ClientID, data=LfvrLong, subset = rando100,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(-2, 6), as.table=T)
rando100 <- round(runif(250,1,12825),0) #creates object of 100 random numbers from 1 to 12825
xyplot(Anxiety~SesNum | ClientID, data=LfvrLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(-2, 6), subset = random100, as.table=T)
rando100 <- round(runif(250,1,12825),0) #creates object of 100 random numbers from 1 to 12825
xyplot(Anxiety~SesNum | ClientID, data=LfvrLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(-2, 6), subset = rando100, as.table=T)
#using broom and dplyr, we create this object that knows to group the data by ID
library(broom)
by_ID <- group_by(LfvrLong, ClientID)
#then we get a tidy regression for each model
do(by_ID,
glance(lm(Anxiety~SesNum, data = .)))
RndmSmpl30 <- LfvrLong%>%
dplyr::group_by(ClientID) %>%
sample(1:nrow(LfvrLong),30,
replace=FALSE),)
RndmSmpl30 <- LfvrLong%>%
dplyr::group_by(ClientID) %>%
sample(1:nrow(LfvrLong),30,
replace=FALSE))
RndmSmpl30 <- LfvrLong%>%
dplyr::group_by(ClientID) %>%
sample(1:nrow(LfvrLong),30,
replace=FALSE)
RndmSmpl30 <- LfvrWide[sample(1:12825(mydata), 50,
replace=FALSE),]
RndmSmpl50 <- LfvrWide[sample(1:12825(LfvrWide), 50,
replace=FALSE),]
RndmSmpl50 <- LfvrWide[sample(1:nrow(LfvrWide), 50,
replace=FALSE),]
set.seed(210515)
set.seed(210515)
RndmSmpl50 <- LfvrWide[sample(1:nrow(LfvrWide), 50,
replace=FALSE),]
RndmLong <- (data.table::melt(setDT(RndmSmpl50), id.vars = c("ClientID", "Rel1L2", "Rel2L2", "SexID"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
RndmLong<-  rename(RndmLong<-  rename(RndmLong<-  rename(RndmLong, SesNum = variable, Anxiety = "value1", Session = "value2")))
#resorting data so that each person is together
RndmLong <- arrange(RndmLong, ClientID, SesNum)
View(RndmLong)
xyplot(Anxiety ~ SesNum | ClientID, data = LfvrLong, as.table=T)
set.seed(210515)
RndmSmpl25 <- LfvrWide[sample(1:nrow(LfvrWide), 25,
replace=FALSE),]
RndmLong <- (data.table::melt(setDT(RndmSmpl25), id.vars = c("ClientID", "Rel1L2", "Rel2L2", "SexID"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
RndmLong<-  rename(RndmLong<-  rename(RndmLong<-  rename(RndmLong, SesNum = variable, Anxiety = "value1", Session = "value2")))
#resorting data so that each person is together
RndmLong <- arrange(RndmLong, ClientID, SesNum)
xyplot(Anxiety ~ SesNum | ClientID, data =RndmLong, as.table=T)
?xyplot
set.seed(210515)
RndmSmpl100 <- LfvrWide[sample(1:nrow(LfvrWide), 100,
replace=FALSE),]
RndmLong <- (data.table::melt(setDT(RndmSmpl100), id.vars = c("ClientID", "Rel1L2", "Rel2L2", "SexID"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
RndmLong<-  rename(RndmLong<-  rename(RndmLong<-  rename(RndmLong, SesNum = variable, Anxiety = "value1", Session = "value2")))
#resorting data so that each person is together
RndmLong <- arrange(RndmLong, ClientID, SesNum)
xyplot(Anxiety ~ SesNum | ClientID, data =RndmLong, as.table=T)
?xyplot
set.seed(210515)
RndmSmpl100 <- LfvrWide[sample(1:nrow(LfvrWide), 100,
replace=FALSE),]
RndmLong <- (data.table::melt(setDT(RndmSmpl25), id.vars = c("ClientID", "Rel1L2", "Rel2L2", "SexID"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
RndmLong<-  rename(RndmLong<-  rename(RndmLong<-  rename(RndmLong, SesNum = variable, Anxiety = "value1", Session = "value2")))
#resorting data so that each person is together
RndmLong <- arrange(RndmLong, ClientID, SesNum)
xyplot(Anxiety ~ SesNum | ClientID, data =RndmLong, as.table=T)
?xyplot
set.seed(210515)
RndmSmpl100 <- LfvrWide[sample(1:nrow(LfvrWide), 100,
replace=FALSE),]
RndmLong <- (data.table::melt(setDT(RndmSmpl100), id.vars = c("ClientID", "Rel1L2", "Rel2L2", "SexID"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
RndmLong<-  rename(RndmLong<-  rename(RndmLong<-  rename(RndmLong, SesNum = variable, Anxiety = "value1", Session = "value2")))
#resorting data so that each person is together
RndmLong <- arrange(RndmLong, ClientID, SesNum)
xyplot(Anxiety ~ SesNum | ClientID, data =RndmLong, as.table=T)
?xyplot
xyplot(Anxiety~SesNum | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(-2, 6), subset = rando100, as.table=T)
xyplot(Anxiety~SesNum | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(0, 6),  as.table=T)
xyplot(Anxiety~SesNum | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
ylim=c(-2, 6),  as.table=T)
xyplot(Anxiety~SesNum | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
#using broom and dplyr, we create this object that knows to group the data by ID
library(broom)
by_ID <- group_by(RndmLong, ClientID)
#then we get a tidy regression for each model
do(by_ID,
glance(lm(Anxiety~SesNum, data = .)))
#if we dinked around with it we could probably get more of what is reported in Table 2.2
#using broom and dplyr, we create this object that knows to group the data by ID
library(broom)
by_ID <- group_by(RndmLong, ClientID)
#then we get a tidy regression for each model
do(by_ID,
glance(lm(Anxiety~SesNum, data = RndmLong)))
#if we dinked around with it we could probably get more of what is reported in Table 2.2
View(RndmSmpl100)
View(RndmLong)
ANX_OLS <- function (RndmLong){
summary(lm(ANX_OLS ~ SesNum, data = RndmLong))
}
by(RndmLong, RndmLong$ClientID, ANX_OLS)
ANX_OLS <- function (RndmLong){
summary(lm(ANX ~ SesNum, data = RndmLong))
}
by(RndmLong, RndmLong$ClientID, ANX_OLS)
ANX_OLS <- function (RndmLong){
summary(lm(Anxiety ~ SesNum, data = RndmLong))
}
by(RndmLong, RndmLong$ClientID, ANX_OLS)
set.seed(210515)
RndmSmpl30 <- LfvrWide[sample(1:nrow(LfvrWide), 30,
replace=FALSE),]
RndmLong <- (data.table::melt(setDT(RndmSmpl30), id.vars = c("ClientID", "Rel1L2", "Rel2L2", "SexID"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
RndmLong<-  rename(RndmLong<-  rename(RndmLong<-  rename(RndmLong, SesNum = variable, Anxiety = "value1", Session = "value2")))
#resorting data so that each person is together
RndmLong <- arrange(RndmLong, ClientID, SesNum)
xyplot(Anxiety ~ SesNum | ClientID, data =RndmLong, as.table=T)
?xyplot
xyplot(Anxiety~SesNum | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session Number", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
#using broom and dplyr, we create this object that knows to group the data by ID
library(broom)
by_ID <- group_by(RndmLong, ClientID)
#then we get a tidy regression for each model
do(by_ID,
glance(lm(Anxiety~SesNum, data = RndmLong)))
#if we dinked around with it we could probably get more of what is reported in Table 2.2
ANX_OLS <- function (RndmLong){
summary(lm(Anxiety ~ SesNum, data = RndmLong))
}
by(RndmLong, RndmLong$ClientID, ANX_OLS)
xyplot(Anxiety ~ SesNum | ClientID, data=RndmLong,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
}, ylim=c(-2, 4), as.table=T)
#plot of raw data for every case
interaction.plot(RndmLong$SesNum, RndmLong$ClientID, RndmLong$Anxiety)
#fitting the linear model by ID
fit <- by(RndmLong, RndmLong$ClientID,
function(bydata) fitted.values(lm(Anxiety ~ SesNum, data=bydata)))
fit <- unlist(fit)
#plotting the linear fit by ID
interaction.plot(RndmLong$SesNum, RndmLong$ClientID, fit, xlab="Sessions", ylab="Anxiety")
#obtaining the intercept from the linear model by ID
ints <- by(RndmLong, RndmLong$ClienID,
function(data) coefficients(lm(Anxiety ~ SesNum, data=data))[[1]])
#obtaining the intercept from the linear model by ID
ints <- by(RndmLong, RndmLong$ClientID,
function(data) coefficients(lm(Anxiety ~ SesNum, data=data))[[1]])
ints1 <- unlist(ints)
names(ints1) <- NULL
mean(ints1)
sqrt(var(ints1))
#obtaining the slopes from linear model by id
slopes <- by(RndmLong, RndmLong$ClientID,
function(data) coefficients(lm(Anxiety ~ SesNum, data=data))[[2]])
slopes1 <- unlist(slopes)
names(slopes1) <- NULL
mean(slopes1)
sqrt(var(slopes1))
cor( ints1, slopes1)
#fitting the linear model by ID, DR only
DR <- filter(RndmLong, R1L2=="2")
#fitting the linear model by ID, DR only
DR <- filter(RndmLong, Rel1L2=="2")
fitmlist <- by(DR, DR$ClientID, function(bydata) fitted.values(lm(Anxiety ~ SesNum, data=bydata)))
fitm <- unlist(fitmlist)
#fitting the linear model by ID, DR only
DR <- filter(RndmLong, Rel1L2=="2")
fitmlist <- by(DR, DR$ClientID, function(bydata) fitted.values(lm(Anxiety ~ SesNum, data=bydata)))
fitDR <- unlist(fitmlist)
#appending the average for the whole group of males
lm.DR <- fitted( lm(Anxiety ~ SesNum, data=DR) )
names(lm.DR) <- NULL
fit.DR2 <- c(fitDR, lm.DR[1:5])
age1.DR <- c(DR$AGE11, seq(0,4))
id.DR <- c(DR$ID, rep(111, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(age1.DR, id.DR, fit.DR2, ylim=c(0, 4), xlab="Sessions", ylab="Anxiety", lwd=1)
#appending the average for the whole group of males
lm.DR <- fitted( lm(Anxiety ~ SesNum, data=DR) )
names(lm.DR) <- NULL
fit.DR2 <- c(fitDR, lm.DR[1:5])
Sess1.DR <- c(DR$SesNum, seq(0,4))
id.DR <- c(DR$ID, rep(111, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.DR, id.DR, fit.DR2, ylim=c(0, 4), xlab="Sessions", ylab="Anxiety", lwd=1)
#appending the average for the whole group of males
lm.DR <- fitted( lm(Anxiety ~ SesNum, data=DR) )
names(lm.DR) <- NULL
fit.DR2 <- c(fitDR, lm.DR[1:5])
Sess1.DR <- c(DR$SesNum, seq(1,5))
id.DR <- c(DR$ClientID, rep(30, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.DR, id.DR, fit.DR2, ylim=c(0, 4), xlab="Sessions", ylab="Anxiety", lwd=1)
title(main="Dominant Religious")
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.DR, id.DR, fit.DR2, ylim=c(-2, 6), xlab="Sessions", ylab="Anxiety", lwd=1)
title(main="Dominant Religious")
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.DR, id.DR, fit.DR2, ylim=c(-2, 8), xlab="Sessions", ylab="Anxiety", lwd=1)
title(main="Dominant Religious")
set.seed(200513)
n_client = 12825
n_session = 5
b0 = 2.03 #intercept for anxiety
b1 = -.22 #b weight for L1 session
b2 = .13 #b weight for L2 sexual identity
b3 =  -.03 #b weight for L2 Rel1 (D-R vs ND-R & ND-U)
b4 = .01 #b weight for the L2 Rel2 (ND-R vs ND-U)
#the values used below are the +/- 3SD they produce continuous variables which later need to be transformed to categorical ones; admittedly this introduces a great deal of error/noise into the simulation
#the article didn't include a correlation matrix or M/SDs so this was a clunky process
( Session = runif(n_client*n_session, -3.61, 3.18)) #calc L1 Session, values are the +/3 3SD
( SexualIdentity = runif(n_client*Session, -6.66, 6.92)) #calc L2 Sexual Identity, values are the +/3 3SD
set.seed(200513)
n_client = 12825
n_session = 5
b0 = 2.03 #intercept for anxiety
b1 = -.22 #b weight for L1 session
b2 = .13 #b weight for L2 sexual identity
b3 =  -.03 #b weight for L2 Rel1 (D-R vs ND-R & ND-U)
b4 = .01 #b weight for the L2 Rel2 (ND-R vs ND-U)
#the values used below are the +/- 3SD they produce continuous variables which later need to be transformed to categorical ones; admittedly this introduces a great deal of error/noise into the simulation
#the article didn't include a correlation matrix or M/SDs so this was a clunky process
( Session = runif(n_client*n_session, -3.61, 3.18)) #calc L1 Session, values are the +/3 3SD
( SexualIdentity = runif(n_client*Session, -6.66, 6.92)) #calc L2 Sexual Identity, values are the +/3 3SD
( Religion1 = runif(n_client*Session, -3.43, 3.37)) #calc L2 Religion1, values are the +/3 3SD
( Religion2 = rep (runif(n_session, -3.38, 3.41), each = n_session)) #calc L2 Religion2, values are the +/3 3SD
mu = 1.76 #intercept of empty model
sds = 2.264 #this is the SD of the DV
sd = 1 #this is the observation-level random effect variance that we set at 1
#( church = rep(LETTERS[1:n_church], each = n_mbrs) ) #this worked in the prior
( client = rep(LETTERS[1:n_client], each = n_session) )
#( session = numbers[1:(n_client*n_session)] )
( clienteff = rnorm(n_client, 0, sds) )
( clienteff = rep(clienteff, each = n_session) )
( sessioneff = rnorm(n_client*n_session, 0, sd) )
( Anxiety = b0 + b1*Session + b2*SexualIdentity + b3*Religion1 + b4*Religion2 + clienteff + sessioneff)
( dat = data.frame(client, clienteff, sessioneff, Session, SexualIdentity, Religion1, Religion2, Anxiety) )
View(dat)
library(dplyr)
dat <- dat %>% mutate(ID = row_number())
#moving the ID number to the first column; requires
dat <- dat%>%select(ID, everything())
Lefevor2017 <- dat%>%
select(ID, client, Session, SexualIdentity, Religion1, Religion2, Anxiety)
Lefevor2017$ClientID <- rep(c(1:12825), each = 5)
View(Lefevor2017)
library(robumeta)
#The following variables should be L2, but were simulated as if they were L1
Lefevor2017$Rel1 <- as.numeric(group.mean(Lefevor2017$Religion1,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$Rel2 <- as.numeric(group.mean(Lefevor2017$Religion2,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$SxID <- as.numeric(group.mean(Lefevor2017$SexualIdentity,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$Rel2L2 <- ifelse(Lefevor2017$Religion2 <= -3.0877087, -1,
ifelse(Lefevor2017$Religion2 >= -3.0877087 & Lefevor2017$Religion2 <= 0.9299491, 0,1))
Lefevor2017$Rel1L2 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(-1, 2, -1))
Lefevor2017$DRel0 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(1, 0, 1))
Lefevor2017$SexID <- ifelse(Lefevor2017$SxID <= 1.203468, -1,1)
Lefevor2017$Het0 <- plyr::mapvalues(Lefevor2017$SexID, from = c(-1,1), to = c(0,1))
Lefevor2017$Session0 <- as.integer(scales::rescale(Lefevor2017$Session, to = c(0, 19)))
library(dplyr)
Lefevor2017 <- Lefevor2017%>%
dplyr::group_by(ClientID) %>%
mutate(Index = rank(Session))
Lefevor2017_sim <- Lefevor2017%>%
select(ClientID, Index, Session0, Anxiety, DRel0, Het0)
View(Lefevor2017_sim)
#In the transition from long-to-wide, it seems like you can only do one L1 variable at a time
#When there are multiple L1 and L2 vars, put all L2 vars on left of tilde
#The wave/index function should come next; this should be finite (like integers of 1,2,3,4) with a maximum
#Put the name of the SINGLE L1 variable in the concatonated list
library(data.table)
LfvrWp1<-reshape2::dcast(Lefevor2017_sim, ClientID + DRel0 + Het0 ~ Index, value.var = c("Index"))
View(LfvrWp1)
#rename the anxiety variable
LfvrWp1<-  rename(LfvrWp1, Index1 = "1", Index2 = "2", Index3 = "3", Index4 = "4", Index5 = "5")
LfvrWp2<-reshape2::dcast(Lefevor2017_sim, ClientID ~ Index, value.var = c("Anxiety"))
View(LfvrWp2)
#rename the anxiety variable
LfvrWp2<-  rename(LfvrWp2, Anx1 = "1", Anx2 = "2", Anx3 = "3", Anx4 = "4", Anx5 = "5")
#For remaining L1 variable, do them one at a time -- key them from the person-level ID and the wave/index.
LfvrWp3<-reshape2::dcast(Lefevor2017_sim, ClientID ~ Index, value.var = c("Session0"))
View(LfvrWp3)
LfvrWp3<-  rename(LfvrWp3, Sess1 = "1", Sess2 = "2", Sess3 = "3", Sess4 = "4", Sess5 = "5")
#Next, join the dataframes by the person-level ID
#Only two can be joined at a time
LfvrWide <- dplyr::full_join(LfvrWp1, LfvrWp2, by = c("ClientID"))
View(LfvrWide)
LfvrWide <- dplyr::full_join(LfvrWide, LfvrWp3,  by = c("ClientID"))
write.table(LfvrWide, file="LefevorWide.csv", sep=",", col.names=TRUE, row.names=FALSE)
write.table(LfvrWide, file="LefevorWide.csv", sep=",", col.names=TRUE, row.names=FALSE)
LfvrWide <- read.csv ("LefevorWide.csv", head = TRUE, sep = ",")
View(LfvrWide)
library(psych)
round(psych::describe(LfvrWide),3)
#Multilevel level correlation matrix
apaTables::apa.cor.table(LfvrWide[c(
"DRel0", "Het0", "Anx1", "Anx2", "Anx3", "Anx4", "Anx5")], show.conf.interval = FALSE, landscape = TRUE, table.number = 1, filename="Lfvr2017_CorMatrix.doc")
str(LfvrWide)
library(data.table) #the package for melting (better than reshape2 because it can accommodate multiple repeated measures variables)
#add the name of the wide df after "setDT"
#id.vars are L2 variables that do not change over time
#measure.vars are those that change over time; if there is more than one that is time-covarying, add a comma followed by another another concatonated list.
LfvrLong <- (data.table::melt(setDT(LfvrWide), id.vars = c("ClientID", "DRel0", "Het0"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
View(LfvrLong)
View(LfvrLong)
#This process  does not preserve the variable names, so we need to rename them
LfvrLong<-  rename(LfvrLong<-  rename(LfvrLong<-  rename(LfvrLong, Index = variable, Anxiety = "value1", SesNum = "value2")))
write.table(LfvrLong, file="LfvrLong.csv", sep=",", col.names=TRUE, row.names=FALSE)
#rearanging variables so that IDs are together
LfvrLong <- LfvrLong%>%
select(ClientID, Index, SesNum, Anxiety, DRel0, Het0)
#resorting data so that each person is together
LfvrLong <- arrange(LfvrLong, ClientID, Index)
View(LfvrLong)
str(LfvrLong)
round(psych::describe(LfvrLong),3)
set.seed(210515)
RndmSmpl30 <- LfvrWide[sample(1:nrow(LfvrWide), 30,
replace=FALSE),]
RndmLong <- (data.table::melt(setDT(RndmSmpl30), id.vars = c("ClientID", "DRel0", "Het0"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
RndmLong<-  rename(RndmLong<-  rename(RndmLong<-  rename(RndmLong, Index = variable, Anxiety = "value1", Session0 = "value2")))
#resorting data so that each person is together
RndmLong <- arrange(RndmLong, ClientID, Index)
View(RndmSmpl30)
View(RndmLong)
xyplot(Anxiety~Session | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
library(lattice)
library(ggplot2)
xyplot(Anxiety~Session | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
xyplot(Anxiety~Session0 | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Session", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
xyplot(Anxiety~Index | ClientID, data=RndmLong,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Index", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
ANX_OLS <- function (RndmLong){
summary(lm(Anxiety ~ Session0, data = RndmLong))
}
by(RndmLong, RndmLong$ClientID, ANX_OLS)
#plot of raw data for every case
#Session0 provided splotchy data; Index0 gives some indication of change
interaction.plot(RndmLong$Session0, RndmLong$ClientID, RndmLong$Anxiety)
#plot of raw data for every case
#Session0 provided splotchy data; Index0 gives some indication of change
interaction.plot(RndmLong$Index, RndmLong$ClientID, RndmLong$Anxiety)
#fitting the linear model by ID
fit <- by(RndmLong, RndmLong$ClientID,
function(bydata) fitted.values(lm(Anxiety ~ Session0, data=bydata)))
fit <- unlist(fit)
#plotting the linear fit by ID
interaction.plot(RndmLong$Index, RndmLong$ClientID, fit, xlab="Sessions", ylab="Anxiety")
#obtaining the intercept from the linear model by ClientID
ints <- by(RndmLong, RndmLong$ClientID,
function(data) coefficients(lm(Anxiety ~ Session0, data=data))[[1]])
ints1 <- unlist(ints)
names(ints1) <- NULL
mean(ints1)
sqrt(var(ints1))
#obtaining the slopes from linear model by id
slopes <- by(RndmLong, RndmLong$ClientID,
function(data) coefficients(lm(Anxiety ~ Session0, data=data))[[2]])
slopes1 <- unlist(slopes)
names(slopes1) <- NULL
mean(slopes1)
sqrt(var(slopes1))
cor( ints1, slopes1)
#fitting the linear model by ID, DR only
DR <- filter(RndmLong, DRel0=="0")
fitmlist <- by(DR, DR$ClientID, function(bydata) fitted.values(lm(Anxiety ~ Session0, data=bydata)))
fitDR <- unlist(fitmlist)
#appending the average for the whole group of DR
lm.DR <- fitted( lm(Anxiety ~ Session0, data=DR) )
names(lm.DR) <- NULL
fit.DR2 <- c(fitDR, lm.DR[1:5])
Sess1.DR <- c(DR$Index, seq(1,5))#Note that I used Session0 to create the lm, but plotted by Index0
id.DR <- c(DR$ClientID, rep(30, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.DR, id.DR, fit.DR2, ylim=c(-2, 8), xlab="Sessions", ylab="Anxiety", lwd=1)
title(main="Dominant Religious")
#fitting the linear model by ID, DR only
NDR <- filter(RndmLong, DRel0=="1")
fitmlist <- by(NDR, NDR$ClientID, function(bydata) fitted.values(lm(Anxiety ~ Session0, data=bydata)))
fitNDR <- unlist(fitmlist)
#appending the average for the whole group of males
lm.NDR <- fitted( lm(Anxiety ~ Session0, data=NDR) )
names(lm.NDR) <- NULL
fit.NDR2 <- c(fitNDR, lm.NDR[1:5])
Sess1.NDR <- c(NDR$Index, seq(1,5))#Note that I used Session0 to create the lm, but plotted by Index0
id.NDR <- c(NDR$ClientID, rep(30, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.NDR, id.NDR, fit.NDR2, ylim=c(-2, 8), xlab="Sessions", ylab="Anxiety", lwd=1)
title(main="Non-Dominant Religious")
#fitting the linear model by ID, HET = 0 only
HET <- filter(RndmLong, Het0=="0")
fitmlist <- by(HET, HET$ClientID, function(bydata) fitted.values(lm(Anxiety ~ Session0, data=bydata)))
fitHET <- unlist(fitmlist)
#appending the average for the whole group of males
lm.HET <- fitted( lm(Anxiety ~ Session0, data=HET) )
names(lm.HET) <- NULL
fit.HET <- c(fitHET, lm.HET[1:5])
Sess1.HET <- c(HET$Index, seq(1,5))#Note that I used Session0 to create the lm, but plotted by Index0
id.HET <- c(HET$ClientID, rep(30, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.HET, id.HET, fit.HET, ylim=c(-2, 8), xlab="Sessions", ylab="Anxiety", lwd=1)
title(main="Heterosexual")
#fitting the linear model by ID, DR only
LGBQQ <- filter(RndmLong, Het0=="1")
fitmlist <- by(LGBQQ, LGBQQ$ClientID, function(bydata) fitted.values(lm(Anxiety ~ Session0, data=bydata)))
fitLGBQQ <- unlist(fitmlist)
#appending the average for the whole group of males
lm.LGBQQ <- fitted( lm(Anxiety ~ Session0, data=LGBQQ) )
names(lm.LGBQQ) <- NULL
fit.LGBQQ <- c(fitLGBQQ, lm.LGBQQ[1:5])
Sess1.LGBQQ <- c(LGBQQ$Index, seq(1,5)) #Note that I used Session0 to create the lm, but plotted by Index0
id.LGBQQ <- c(LGBQQ$ClientID, rep(30, 5))
#plotting the linear fit by id, males
#id.m=111 denotes the average value for males
interaction.plot(Sess1.LGBQQ, id.LGBQQ, fit.LGBQQ, ylim=c(-2, 8), xlab="Sessions", ylab="Anxiety", lwd=1)
title(main="LGBQQ")
cor(RndmSmpl30$DRel0, ints1)
