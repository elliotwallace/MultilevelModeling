OlsonNames()
TIMElong <- TIMElong%>%
mutate (Date = Intake + dweeks(SessionT))
citr:::insert_citation()
TIMElong <- TIMElong%>%
mutate (Appointment = Intake + dweeks(SessionT))
View(TIMElong)
TIMElong <- TIMElong %>%
mutate(TimeInterval = Intake %--% Appointment)
citr:::insert_citation()
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks())
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks(x=1))
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks)
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks())
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks(x=2))
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks(x=1))
TIMEwide <- read.csv ("LefevorTWide.csv", head = TRUE, sep = ",")
TIMElong$df$DateVariable <- ymd_hms(df$DateVariable, tz = "US/Mountain")
View(TIMEwide)
View(TIMEwide)
TIMEwide <- TIMEwide%>%
mutate (Weeks1 = Intake + dweeks(Sess1))
library(lubridate)
TIMEwide$Intake <- ymd("2021-05-28")
TIMEwide <- TIMEwide%>%
mutate (Weeks1 = Intake + dweeks(Sess1))
TIMEwide <- TIMEwide%>%
mutate (Weeks1 = Intake + dweeks(Sess1))%>%
mutate (Weeks2 = Intake + dweeks(Sess2))%>%
mutate (Weeks3 = Intake + dweeks(Sess3))%>%
mutate (Weeks4 = Intake + dweeks(Sess4))%>%
mutate (Weeks5 = Intake + dweeks(Sess5))
TIMEwide <- TIMEwide %>%
mutate(TimeInterval1 = Intake %--% Weeks1)%>%
mutate(TimeInterval2 = Intake %--% Weeks2)%>%
mutate(TimeInterval3 = Intake %--% Weeks3)%>%
mutate(TimeInterval4 = Intake %--% Weeks4)%>%
mutate(TimeInterval5 = Intake %--% Weeks5)
TIMEwide <- TIMEwide %>%
mutate(Wks1 = as.duration(TimeInterval1)/dweeks(x=1))%>%
mutate(Wks2 = as.duration(TimeInterval2)/dweeks(x=1))%>%
mutate(Wks3 = as.duration(TimeInterval3)/dweeks(x=1))%>%
mutate(Wks4 = as.duration(TimeInterval4)/dweeks(x=1))%>%
mutate(Wks5 = as.duration(TimeInterval5)/dweeks(x=1))
library(data.table)
Long <- (data.table::melt(setDT(TIMEwide), id.vars = c("ClientID", "DRel0", "Het0"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Index1", "Index2", "Index3", "Index4", "Index5"), c("Wks1", "Wks2", "Wks3", "Wks4", "Wks5") )))
View(Long)
Long <- (data.table::melt(setDT(TIMEwide), id.vars = c("ClientID", "DRel0", "Het0"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"),  c("Wks1", "Wks2", "Wks3", "Wks4", "Wks5") )))
View(Long)
#This process  does not preserve the variable names, so we need to rename them
Long<- rename(LfvrLong<-  rename(Long, Index = variable, Anxiety = "value1", Wks = "value2")))
#This process  does not preserve the variable names, so we need to rename them
Long<- rename(LfvrLong<-  rename(Long, Index = variable, Anxiety = "value1", Wks = "value2"))
#rearanging variables so that IDs are together
Long <- LfvrLong%>%
select(ClientID, Index, Wks, Anxiety, DRel0, Het0)
#resorting data so that each person is together
Long <- arrange(Long, ClientID, Index)
View(Long)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
set.seed(200513)
n_client = 12825
n_session = 5
b0 = 2.03 #intercept for anxiety
b1 = -.22 #b weight for L1 session
b2 = .13 #b weight for L2 sexual identity
b3 =  -.03 #b weight for L2 Rel1 (D-R vs ND-R & ND-U)
b4 = .01 #b weight for the L2 Rel2 (ND-R vs ND-U)
#the values used below are the +/- 3SD they produce continuous variables which later need to be transformed to categorical ones; admittedly this introduces a great deal of error/noise into the simulation
#the article didn't include a correlation matrix or M/SDs so this was a clunky process
( Session = runif(n_client*n_session, -3.61, 3.18)) #calc L1 Session, values are the +/3 3SD
( SexualIdentity = runif(n_client*Session, -6.66, 6.92)) #calc L2 Sexual Identity, values are the +/3 3SD
( Religion1 = runif(n_client*Session, -3.43, 3.37)) #calc L2 Religion1, values are the +/3 3SD
( Religion2 = rep (runif(n_session, -3.38, 3.41), each = n_session)) #calc L2 Religion2, values are the +/3 3SD
mu = 1.76 #intercept of empty model
sds = 2.264 #this is the SD of the DV
sd = 1 #this is the observation-level random effect variance that we set at 1
#( church = rep(LETTERS[1:n_church], each = n_mbrs) ) #this worked in the prior
( client = rep(LETTERS[1:n_client], each = n_session) )
#( session = numbers[1:(n_client*n_session)] )
( clienteff = rnorm(n_client, 0, sds) )
( clienteff = rep(clienteff, each = n_session) )
( sessioneff = rnorm(n_client*n_session, 0, sd) )
( Anxiety = b0 + b1*Session + b2*SexualIdentity + b3*Religion1 + b4*Religion2 + clienteff + sessioneff)
( dat = data.frame(client, clienteff, sessioneff, Session, SexualIdentity, Religion1, Religion2, Anxiety) )
library(dplyr)
dat <- dat %>% mutate(ID = row_number())
#moving the ID number to the first column; requires
dat <- dat%>%select(ID, everything())
Lefevor2017 <- dat%>%
select(ID, client, Session, SexualIdentity, Religion1, Religion2, Anxiety)
Lefevor2017$ClientID <- rep(c(1:12825), each = 5)
#rounded Sexual Identity into dichotomous variable
#85% were heterosexual,
library(robumeta)
#The following variables should be L2, but were simulated as if they were L1
Lefevor2017$Rel1 <- as.numeric(group.mean(Lefevor2017$Religion1,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$Rel2 <- as.numeric(group.mean(Lefevor2017$Religion2,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$SxID <- as.numeric(group.mean(Lefevor2017$SexualIdentity,Lefevor2017$ClientID))#aggregated at group mean
#Rel2 has contrast codes for dominant religion (DR, 0), nondominant religious (NDR, 1) and nondominant unspecified (NDU, -1)
#Strategy is to figure out the raw score associated with the percentile rank of  -1 and 0, to set the breakpoints for the coding
#NDU coded as -1
#19.2+13.5+9.6
#NDU has bottom 42.3 percent
#DR coded as 0, so quantile cut will be 42.3 + 52.7 = 95th
#33.4 + 19.3
#52.7% of sample (according to article) was DR
#must look up percentile ranks for 5% and 57.5%
#NDR
#2.3+1+1+.7
#NDR has 5% of sample
#42.3+52.7
#quantile(Lefevor2017$Religion2, probs = c(.423, .95))
#effects coding the second Religion variable so that NDU = -1, DR = 0, NDR = 1
Lefevor2017$Rel2L2 <- ifelse(Lefevor2017$Religion2 <= -3.0877087, -1,
ifelse(Lefevor2017$Religion2 >= -3.0877087 & Lefevor2017$Religion2 <= 0.9299491, 0,1))
#checking work
#Rel2L2_table <- table(Lefevor2017$Rel2L2)
#prop.table(Rel2L2_table)
#Lefevor2017 %>%
#count(Rel2L2)
#creating the first religion variable where DR is 2 and NDR and NDU are both -1
Lefevor2017$Rel1L2 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(-1, 2, -1))
Lefevor2017$DRel0 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(1, 0, 1))
#checking to make sure that 52.7% are coded 2 (DR)
#Rel1L2_table <- table(Lefevor2017$Rel1L2)
#prop.table(Rel1L2_table)
#heterosexual is -1
#LGBTQIA+ is 1
#quantile(Lefevor2017$SxID, probs = c(.85))
Lefevor2017$SexID <- ifelse(Lefevor2017$SxID <= 1.203468, -1,1)
Lefevor2017$Het0 <- plyr::mapvalues(Lefevor2017$SexID, from = c(-1,1), to = c(0,1))
#SexID_table <- table(Lefevor2017$SexID)
#prop.table(SexID_table)
#creating a variable representing the session number for each client, in the article up to 20 sessions were allowed.
#install.packages("scales")
library(scales)
#Right from the beginning I centered this so that 0 would represent intake
#Lefevor2017$Session0 <- as.integer(scales::rescale(Lefevor2017$Session, to = c(0, 19)))
Lefevor2017$SessionT <- scales::rescale(Lefevor2017$Session, to = c(0, 19))
#creating session waves (1 thru 5) by rank ordering within each person's variable the continuous variable Session that was created in the original simulation
library(dplyr)
LefevorTIME <- Lefevor2017%>%
dplyr::group_by(ClientID) %>%
mutate(Index = rank(Session))
#selecting the simulated variables
LefevorTIME_sim <- LefevorTIME%>%
select(ClientID, Index, SessionT, Anxiety, DRel0, Het0)
#rearranging variables so that IDs are together
LefevorTIME_sim <- LefevorTIME_sim%>%
select(ClientID, Index, SesNum, Anxiety, DRel0, Het0)
#rearranging variables so that IDs are together
LefevorTIME_sim <- LefevorTIME_sim%>%
select(ClientID, Index, SessionT, Anxiety, DRel0, Het0)
#resorting data so that each person is together
LefevorTIME_sim <- arrange(LefevorTIME_sim, ClientID, Index)
#In the transition from long-to-wide, it seems like you can only do one L1 variable at a time
#When there are multiple L1 and L2 vars, put all L2 vars on left of tilde
#The wave/index function should come next; this should be finite (like integers of 1,2,3,4) with a maximum
#Put the name of the SINGLE L1 variable in the concatonated list
library(data.table)
LfvrTWp1<-reshape2::dcast(LefevorTIME_sim, ClientID + DRel0 + Het0 ~ Index, value.var = c("Index"))
#rename the anxiety variable
LfvrTWp1<-  rename(LfvrTWp1, Index1 = "1", Index2 = "2", Index3 = "3", Index4 = "4", Index5 = "5")
LfvrTWp2<-reshape2::dcast(LefevorTIME_sim, ClientID ~ Index, value.var = c("Anxiety"))
#rename the anxiety variable
LfvrTWp2<-  rename(LfvrTWp2, Anx1 = "1", Anx2 = "2", Anx3 = "3", Anx4 = "4", Anx5 = "5")
#For remaining L1 variable, do them one at a time -- key them from the person-level ID and the wave/index.
LfvrTWp3<-reshape2::dcast(LefevorTIME_sim, ClientID ~ Index, value.var = c("SessionT"))
LfvrTWp3<-  rename(LfvrTWp3, Sess1 = "1", Sess2 = "2", Sess3 = "3", Sess4 = "4", Sess5 = "5")
#Next, join the dataframes by the person-level ID
#Only two can be joined at a time
LfvrTWide <- dplyr::full_join(LfvrTWp1, LfvrTWp2, by = c("ClientID"))
LfvrTWide <- dplyr::full_join(LfvrTWide, LfvrTWp3,  by = c("ClientID"))
#Once you simulate the data, the "write.table" script saves it -- ideally to the folder where your .rmd file is located
write.table(LefevorTIME_sim , file="LefevorTLong.csv", sep=",", col.names=TRUE, row.names=FALSE)
set.seed(200513)
n_client = 12825
n_session = 5
b0 = 2.03 #intercept for anxiety
b1 = -.22 #b weight for L1 session
b2 = .13 #b weight for L2 sexual identity
b3 =  -.03 #b weight for L2 Rel1 (D-R vs ND-R & ND-U)
b4 = .01 #b weight for the L2 Rel2 (ND-R vs ND-U)
#the values used below are the +/- 3SD they produce continuous variables which later need to be transformed to categorical ones; admittedly this introduces a great deal of error/noise into the simulation
#the article didn't include a correlation matrix or M/SDs so this was a clunky process
( Session = runif(n_client*n_session, -3.61, 3.18)) #calc L1 Session, values are the +/3 3SD
( SexualIdentity = runif(n_client*Session, -6.66, 6.92)) #calc L2 Sexual Identity, values are the +/3 3SD
( Religion1 = runif(n_client*Session, -3.43, 3.37)) #calc L2 Religion1, values are the +/3 3SD
( Religion2 = rep (runif(n_session, -3.38, 3.41), each = n_session)) #calc L2 Religion2, values are the +/3 3SD
mu = 1.76 #intercept of empty model
sds = 2.264 #this is the SD of the DV
sd = 1 #this is the observation-level random effect variance that we set at 1
#( church = rep(LETTERS[1:n_church], each = n_mbrs) ) #this worked in the prior
( client = rep(LETTERS[1:n_client], each = n_session) )
#( session = numbers[1:(n_client*n_session)] )
( clienteff = rnorm(n_client, 0, sds) )
( clienteff = rep(clienteff, each = n_session) )
( sessioneff = rnorm(n_client*n_session, 0, sd) )
( Anxiety = b0 + b1*Session + b2*SexualIdentity + b3*Religion1 + b4*Religion2 + clienteff + sessioneff)
( dat = data.frame(client, clienteff, sessioneff, Session, SexualIdentity, Religion1, Religion2, Anxiety) )
library(dplyr)
dat <- dat %>% mutate(ID = row_number())
#moving the ID number to the first column; requires
dat <- dat%>%select(ID, everything())
Lefevor2017 <- dat%>%
select(ID, client, Session, SexualIdentity, Religion1, Religion2, Anxiety)
Lefevor2017$ClientID <- rep(c(1:12825), each = 5)
#rounded Sexual Identity into dichotomous variable
#85% were heterosexual,
library(robumeta)
#The following variables should be L2, but were simulated as if they were L1
Lefevor2017$Rel1 <- as.numeric(group.mean(Lefevor2017$Religion1,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$Rel2 <- as.numeric(group.mean(Lefevor2017$Religion2,Lefevor2017$ClientID))#aggregated at group mean
Lefevor2017$SxID <- as.numeric(group.mean(Lefevor2017$SexualIdentity,Lefevor2017$ClientID))#aggregated at group mean
#Rel2 has contrast codes for dominant religion (DR, 0), nondominant religious (NDR, 1) and nondominant unspecified (NDU, -1)
#Strategy is to figure out the raw score associated with the percentile rank of  -1 and 0, to set the breakpoints for the coding
#NDU coded as -1
#19.2+13.5+9.6
#NDU has bottom 42.3 percent
#DR coded as 0, so quantile cut will be 42.3 + 52.7 = 95th
#33.4 + 19.3
#52.7% of sample (according to article) was DR
#must look up percentile ranks for 5% and 57.5%
#NDR
#2.3+1+1+.7
#NDR has 5% of sample
#42.3+52.7
#quantile(Lefevor2017$Religion2, probs = c(.423, .95))
#effects coding the second Religion variable so that NDU = -1, DR = 0, NDR = 1
Lefevor2017$Rel2L2 <- ifelse(Lefevor2017$Religion2 <= -3.0877087, -1,
ifelse(Lefevor2017$Religion2 >= -3.0877087 & Lefevor2017$Religion2 <= 0.9299491, 0,1))
#checking work
#Rel2L2_table <- table(Lefevor2017$Rel2L2)
#prop.table(Rel2L2_table)
#Lefevor2017 %>%
#count(Rel2L2)
#creating the first religion variable where DR is 2 and NDR and NDU are both -1
Lefevor2017$Rel1L2 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(-1, 2, -1))
Lefevor2017$DRel0 <- plyr::mapvalues(Lefevor2017$Rel2L2, from = c(-1, 0, 1), to = c(1, 0, 1))
#checking to make sure that 52.7% are coded 2 (DR)
#Rel1L2_table <- table(Lefevor2017$Rel1L2)
#prop.table(Rel1L2_table)
#heterosexual is -1
#LGBTQIA+ is 1
#quantile(Lefevor2017$SxID, probs = c(.85))
Lefevor2017$SexID <- ifelse(Lefevor2017$SxID <= 1.203468, -1,1)
Lefevor2017$Het0 <- plyr::mapvalues(Lefevor2017$SexID, from = c(-1,1), to = c(0,1))
#SexID_table <- table(Lefevor2017$SexID)
#prop.table(SexID_table)
#creating a variable representing the session number for each client, in the article up to 20 sessions were allowed.
#install.packages("scales")
library(scales)
#Right from the beginning I centered this so that 0 would represent intake
#Lefevor2017$Session0 <- as.integer(scales::rescale(Lefevor2017$Session, to = c(0, 19)))
Lefevor2017$SessionT <- scales::rescale(Lefevor2017$Session, to = c(0, 19))
#creating session waves (1 thru 5) by rank ordering within each person's variable the continuous variable Session that was created in the original simulation
library(dplyr)
LefevorTIME <- Lefevor2017%>%
dplyr::group_by(ClientID) %>%
mutate(Index = rank(Session))
#selecting the simulated variables
LefevorTIME_sim <- LefevorTIME%>%
select(ClientID, Index, SessionT, Anxiety, DRel0, Het0)
#rearranging variables so that IDs are together
LefevorTIME_sim <- LefevorTIME_sim%>%
select(ClientID, Index, SessionT, Anxiety, DRel0, Het0)
#resorting data so that each person is together
LefevorTIME_sim <- arrange(LefevorTIME_sim, ClientID, Index)
#In the transition from long-to-wide, it seems like you can only do one L1 variable at a time
#When there are multiple L1 and L2 vars, put all L2 vars on left of tilde
#The wave/index function should come next; this should be finite (like integers of 1,2,3,4) with a maximum
#Put the name of the SINGLE L1 variable in the concatonated list
library(data.table)
LfvrTWp1<-reshape2::dcast(LefevorTIME_sim, ClientID + DRel0 + Het0 ~ Index, value.var = c("Index"))
#rename the anxiety variable
LfvrTWp1<-  rename(LfvrTWp1, Index1 = "1", Index2 = "2", Index3 = "3", Index4 = "4", Index5 = "5")
LfvrTWp2<-reshape2::dcast(LefevorTIME_sim, ClientID ~ Index, value.var = c("Anxiety"))
#rename the anxiety variable
LfvrTWp2<-  rename(LfvrTWp2, Anx1 = "1", Anx2 = "2", Anx3 = "3", Anx4 = "4", Anx5 = "5")
#For remaining L1 variable, do them one at a time -- key them from the person-level ID and the wave/index.
LfvrTWp3<-reshape2::dcast(LefevorTIME_sim, ClientID ~ Index, value.var = c("SessionT"))
LfvrTWp3<-  rename(LfvrTWp3, Sess1 = "1", Sess2 = "2", Sess3 = "3", Sess4 = "4", Sess5 = "5")
#Next, join the dataframes by the person-level ID
#Only two can be joined at a time
LfvrTWide <- dplyr::full_join(LfvrTWp1, LfvrTWp2, by = c("ClientID"))
LfvrTWide <- dplyr::full_join(LfvrTWide, LfvrTWp3,  by = c("ClientID"))
#Once you simulate the data, the "write.table" script saves it -- ideally to the folder where your .rmd file is located
write.table(LefevorTIME_sim , file="LefevorTLong.csv", sep=",", col.names=TRUE, row.names=FALSE)
#Once you simulate the data, the "write.table" script saves it -- ideally to the folder where your .rmd file is located
write.table(LfvrTWide, file="LefevorTWide.csv", sep=",", col.names=TRUE, row.names=FALSE)
#If you have used the above code, you can clear your environment, then simply run this line of code to bring the data back in
TIMElong <- read.csv ("LefevorTLong.csv", head = TRUE, sep = ",")
#If you have used the above code, you can clear your environment, then simply run this line of code to bring the data back in
TIMEwide <- read.csv ("LefevorTWide.csv", head = TRUE, sep = ",")
View(TIMElong)
library(lubridate)
TIMElong$Intake <- ymd("2021-05-28")
str(TIMElong)
TIMElong <- TIMElong%>%
mutate (Appointment = Intake + dweeks(SessionT))
TIMElong <- TIMElong %>%
mutate(TimeInterval = Intake %--% Appointment)
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks(x=1))
LfvrLong <- (data.table::melt(setDT(LfvrWide), id.vars = c("ClientID", "DRel0", "Het0"), measure.vars =list(c("Anx1", "Anx2", "Anx3", "Anx4", "Anx5"), c("Sess1", "Sess2", "Sess3", "Sess4", "Sess5"))))
View(TIMElong)
TIMElong <- TIMElong[-sample(1:nrow(TIMElong), 500),]
#If you have used the above code, you can clear your environment, then simply run this line of code to bring the data back in
TIMElong <- read.csv ("LefevorTLong.csv", head = TRUE, sep = ",")
library(lubridate)
TIMElong$Intake <- ymd("2021-05-28")
str(TIMElong)
TIMElong <- TIMElong%>%
mutate (Appointment = Intake + dweeks(SessionT))
TIMElong <- TIMElong %>%
mutate(TimeInterval = Intake %--% Appointment)
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks(x=1))
View(TIMElong)
TIMElong <- TIMElong[-sample(1:nrow(TIMElong), 2000),]
set.seed(210529)
#If you have used the above code, you can clear your environment, then simply run this line of code to bring the data back in
TIMElong <- read.csv ("LefevorTLong.csv", head = TRUE, sep = ",")
library(lubridate)
TIMElong$Intake <- ymd("2021-05-28")
str(TIMElong)
TIMElong <- TIMElong%>%
mutate (Appointment = Intake + dweeks(SessionT))
TIMElong <- TIMElong %>%
mutate(TimeInterval = Intake %--% Appointment)
TIMElong <- TIMElong %>%
mutate(Weeks = as.duration(TimeInterval)/dweeks(x=1))
set.seed(210529)
TIMElong <- TIMElong[-sample(1:nrow(TIMElong), 5000),]
rndm30time <- subset(TIMElong, ClientID %in% sample(levels(TIMElong$ClientID), 30))
rndm30time <- subset(TIMElong, ClientID %in% sample(unique(TIMElong$ClientID), 30))
View(rndm30time)
ggplot(rndm30time, aes(x = Weeks, y = Anxiety, group=ClientID, color = Het0)) +
geom_line(alpha=.3) + labs(title="Anxiety Levels During Psychotherapy, by Sexual Identity") +
theme(legend.position = "none")
library(ggplot2)
ggplot(rndm30time, aes(x = Weeks, y = Anxiety, group=ClientID, color = Het0)) +
geom_line(alpha=.3) + labs(title="Anxiety Levels During Psychotherapy, by Sexual Identity") +
theme(legend.position = "none")
library(ggplot2)
ggplot(rndm30time, aes(x = Weeks, y = Anxiety, group=ClientID, color = DRel0)) +
geom_line(alpha=.3) + labs(title="Anxiety Levels During Psychotherapy, by Religious Affiliation") +
theme(legend.position = "none")
xyplot(Anxiety~Weeks | ClientID, data=rndm30time,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Wks", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
library(lattice)
library(ggplot2)
xyplot(Anxiety~Weeks | ClientID, data=rndm30time,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Wks", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
library(lattice)
library(ggplot2)
xyplot(Anxiety~Weeks | ClientID, data=rndm30time,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Weeks", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
xyplot(Anxiety~Weeks | ClientID, data=rndm30time,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Wks", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
xyplot(Anxiety~Index | ClientID, data=rndm30time,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Weeks", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
xyplot(Anxiety~Index | ClientID, data=rndm30time,
prepanel = function(x, y) prepanel.loess(x, y, family="gaussian"),
xlab = "Wks", ylab = "Anxiety",
panel = function(x, y) {
panel.xyplot(x, y)
panel.loess(x,y, family="gaussian") },
as.table=T)
ggplot(data = rndm30time, aes(x = Wks, y = Anxiety)) + geom_line() +
facet_wrap(~ClientID)
ggplot(data = rndm30time, aes(x = Weeks, y = Anxiety)) + geom_line() +
facet_wrap(~ClientID)
ggplot(data = rndm30time, aes(x = Weeks, y = Anxiety)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + facet_wrap(~ClientID)
ggplot(data = rndm30time, aes(x = Index, y = Anxiety)) + geom_line() +
facet_wrap(~ClientID)
ggplot(data = rndm30time, aes(x = Index, y = Anxiety)) + geom_point() +
stat_smooth(method = "lm", se = FALSE) + facet_wrap(~ClientID)
AnxT_OLS <- function (RndmLong){
summary(lm(Anxiety ~ Weeks, data = rndm30time))
}
by(rndm30time,rndm30time$ClientID, ANX_OLS)
AnxT_OLS <- function (RndmLong){
summary(lm(Anxiety ~ Weeks, data = rndm30time))
}
by(rndm30time,rndm30time$ClientID, AnxT_OLS)
AnxT_OLS <- function (rndm30time){
summary(lm(Anxiety ~ Weeks, data = rndm30time))
}
by(rndm30time,rndm30time$ClientID, AnxT_OLS)
xyplot(Anxiety ~ Weeks | ClientID, data=rndm30time,
panel = function(x, y){
panel.xyplot(x, y)
panel.lmline(x, y)
},  as.table=T)
#plot of raw data for every case
#Session0 provided splotchy data; Index0 gives some indication of change
interaction.plot(rndm30time$Weeks, rndm30time$ClientID, rndm30time$Anxiety)
citr:::insert_citation()
library(lme4)
M1a <- lmer(Anxiety ~1 +(1 | ClientID), TIMElong, REML = FALSE)
summary(Mod1a)
library(lme4)
M1a <- lmer(Anxiety ~1 +(1 | ClientID), TIMElong, REML = FALSE)
summary(M1a)
library(sjPlot)
sjPlot::tab_model(M1a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (M1a, type="diag")
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
#with lme4 package
M2a <- lmer(Anxiety ~ Weeks +(Weeks | ClientID), TIMElong, REML = FALSE)
library(lme4)
#with lme4 package
M2a <- lme4::lmer(Anxiety ~ Weeks +(Weeks | ClientID), TIMElong, REML = FALSE)
summary(M2a )
tab_model(M1a, M2a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2"))
library(sjPlot)
#with lme4 package
M2a <- lme4::lmer(Anxiety ~ Weeks +(Weeks | ClientID), TIMElong, REML = FALSE)
summary(M2a )
tab_model(M1a, M2a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
library(sjPlot)
plot_model (M2a, type="pred", vars="Weeks")
library(sjPlot)
sjPlot::plot_model (M2a, type="pred", vars="Weeks")
sjPlot::plot_model (M2a, type="diag")
(1.45 - 1.26)/1.45
#with lme4 package
M3a <- lme4::lmer(Anxiety ~ Weeks*Het0 +(Weeks | ClientID), TIMElong, REML = FALSE)
summary(M3a)
tab_model(M1a, M2a,M3a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (Mod3a, type="int", terms = c("Weeks", "Het0 [0,1]"))
sjPlot::plot_model (M3a, type="int", terms = c("Weeks", "Het0 [0,1]"))
2.74 + .28
(5.16-5.17)/5.14
#with lme4 package
M4a <- lme4::lmer(Anxiety ~ Weeks*Het0 + Weeks*DRel0 + Het0*DRel0 + (SesNum | ClientID), LfvrLong, REML = FALSE, control = lmerControl(optimizer= "bobyqa"))
#with lme4 package
M4a <- lme4::lmer(Anxiety ~ Weeks*Het0 + Weeks*DRel0 + Het0*DRel0 + (SesNum | ClientID), TIMElong, REML = FALSE, control = lmerControl(optimizer= "bobyqa"))
#with lme4 package
M4a <- lme4::lmer(Anxiety ~ Weeks*Het0 + Weeks*DRel0 + Het0*DRel0 + (Weeks | ClientID), TIMElong, REML = FALSE, control = lmerControl(optimizer= "bobyqa"))
summary(M4a)
tab_model(M1a, M2a, M3a, M4a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3", "Mod4"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
#with lme4 package
M4a <- lme4::lmer(Anxiety ~ Weeks*Het0 + Weeks*DRel0 + Het0*DRel0 + (Weeks | ClientID), TIMElong, REML = FALSE)
summary(M4a)
#control = lmerControl(optimizer= "bobyqa")
tab_model(M1a, M2a, M3a, M4a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3", "Mod4"))
#with lme4 package
M4a <- lme4::lmer(Anxiety ~ Weeks*Het0 + Weeks*DRel0 + Het0*DRel0 + (Weeks | ClientID), TIMElong, REML = FALSE, control = lmerControl(optimizer= "bobyqa"))
summary(M4a)
tab_model(M1a, M2a, M3a, M4a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3", "Mod4"))
#with lme4 package
M4a <- lme4::lmer(Anxiety ~ Weeks*Het0 + Weeks*DRel0 + Het0*DRel0 + (Weeks | ClientID), TIMElong, REML = FALSE, control = lmerControl(optimizer= "bobyqa"))
summary(M4a)
tab_model(M1a, M2a, M3a, M4a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3", "Mod4"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
#with lme4 package
M5a <- lme4::lmer(Anxiety ~ Weeks + Het0 + (Weeks | ClientID), TIMElong, REML = FALSE, control = lmerControl(optimizer= "bobyqa"))
summary(M5a)
tab_model(M1a, M2a, M3a, M4a, M5a, p.style = "numeric", show.ci = FALSE, show.se = TRUE, show.df = FALSE, show.re.var = TRUE, show.aic = TRUE, show.dev = TRUE, use.viewer = TRUE, dv.labels = c("Mod1", "Mod2", "Mod3", "Mod4", "Mod5"))
#can swap this statement with the "file = "TabMod_Table"" to get Viewer output or the outfile that you can open in Word
#file = "TabMod_Table.doc"
sjPlot::plot_model (Mod5a, type="diag")
sjPlot::plot_model (M5a, type="diag")
sjPlot::plot_model (M5a, type="pred",terms=c("Weeks", "Het0"))
